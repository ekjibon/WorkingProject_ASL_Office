
@{
    ViewBag.Title = "Subject Wise Result Process";
}
<div ng-controller="subResultProcessClt">
    <!-- Begin: life time stats -->
    <div class="portlet light bordered">
        <div class="portlet-title">
            <div class="caption">
                <i class="icon-settings font-green"></i>
                <span class="caption-subject font-green sbold uppercase">@ViewBag.Title</span>
            </div>
            @*<div class="actions">
                    <div class="btn-group btn-group-solid">
                        <button ng-click="resetForm()" class="btn green" data-target="#addmodal" data-toggle="modal"> <i class="fa fa-plus"></i> Add @ViewBag.Title</button>
                    </div>
                </div>*@
        </div>
        <form novalidate name="mform" class="form-horizontal" id="form_sample_1">
            <div class="row" style="margin-right: 1%;">
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Session.$invalid}">
                        <label class="col-md-5 control-label">
                            Session:
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.SessionId" name="Session" ng-options="studentInfo.SessionId as studentInfo.SessionName for studentInfo in CommonFeilds.Session" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Session.$error.required" class="help-block">Session Required</span>
                      </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Term.$invalid}">
                        <label class="col-md-5 control-label">
                            Term :
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.TermId" ng-disabled="ResultProcess.ClassId==null" name="Term" ng-options="T.TermId as T.Name for T in Terms |filter:{ClassId:ResultProcess.ClassId}:true" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Term.$error.required" class="help-block">Term Required</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                 
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Subject.$invalid}">
                        <label class="col-md-5 control-label">
                            Subject :
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-disabled="ResultProcess.ClassId==null" ng-model="ResultProcess.SubjectId" name="Subject" ng-options="S.SubID as S.SubjectName for S in SubjectSetups.results |filter:{ClassId:ResultProcess.ClassId}:true" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Subject.$error.required" class="help-block">Subject Required</span>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row" style="margin-top: 1%;margin-right: 1%">
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.class.$invalid}">
                        <label class="col-md-5 control-label">
                            Class
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.ClassId" name="class" required ng-options="class.ClassId as class.ClassName for class in CommonFeilds.ClassInfo">
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.class.$error.required" class="help-block">Class Name Required</span>
                        </div>
                    </div>
           </div>
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.MainExam.$invalid}">
                        <label class="col-md-5 control-label">
                            Main Exam :
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-disabled="ResultProcess.TermId==null" ng-change="getSubject()" ng-model="ResultProcess.MainExamId" name="MainExam" ng-options="T.MainExamId as T.MainExamName for T in mainExams |filter:{TermId:ResultProcess.TermId}:true" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.MainExam.$error.required" class="help-block">Main Exam Required</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="pull-right">
                        <button ng-click="SubWiseProcess();submitted1=true" class="btn green">Process</button>
                        <button ng-click="submitted=true;ClearProccess()" class="btn yellow-mint">Process Clear</button>
                        <button type="reset" ng-click="submitted1=false" class="btn red">Clear</button>
                        <button ng-click="SubjectLock();submitted1=true" class="btn purple">Lock</button>
                        <button ng-click="submitted=true;isShowLog=true;GetLog()" class="btn blue">Log </button>
                    </div>
                </div>
            </div>
            <div class="panel" ng-show="isShowLog">
                <div class="panel-body scrollHeight">
                    <table class="table table-bordered table-inverse logtableStyle">
                        <thead class="btn-primary">
                            <tr>
                                <th colspan="2" class="text-center" style="padding:5px 10px;text-transform:uppercase"> Logs </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in Logs">
                                <td style="width:25%">{{item.LogTime | date:'medium'}}</td>
                                <td>{{item.Msg}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </form>
    </div>
    <!-- End: life time stats -->
    <!--Modal Area Start-->
    <!--Modal Area End-->
</div>
@section Scripts{
    <script type="text/javascript">
        OEMSApp.controller("subResultProcessClt", ["$scope", "$http", "SweetAlert","blockUI",
           function ($scope, $http, SweetAlert, blockUI) {
               init();
               function init() {
                   initialize();
                   getAllCommons();
                   getmainExams(1);
                   getTerms(1);
               }
               function initialize() {
                   $scope.aemodalTitle = "Add Main Exam";
                   $scope.currentPage = 1;
                   $scope.pageno = 1;
                   $scope.pagesize = 10;
                   $scope.total_count = 12;
                   $scope.search = '';
               
                   $scope.ResultProcess = {};
                   $scope.mainExams = [];
                   $scope.SubjectSetups = [];
                
                   $scope.res = {};
                   $scope.data = {};
                   $scope.resetForm = resetForm;
               
                 
                   $scope.Classes = [];
                   $scope.CommonFeilds = [];

                    $scope.pageSizeArray = [];
                   $scope.pageSizeArray.push({ value: 5, text: 5 });
                   $scope.pageSizeArray.push({ value: 10, text: 10 });
                   $scope.pageSizeArray.push({ value: 20, text: 20 });
                   $scope.pageSizeArray.push({ value: 50, text: 50 });
                   $scope.currentPage = 1;
                   $scope.pageSize = 10;

               }
               function resetForm() {
                   $scope.aemodalTitle = "Add Main Exam";
                   $scope.mainExam = {};
                   $scope.addform.$setUntouched();
                   $scope.addform.$setPristine();
                   $scope.submitted = false;
                   $scope.MainExamId = '';
                   $scope.mainExam.MainExamId = 0;
                   getmainExams(1);
               }
        function getmainExams() {
                   $scope.mainExams = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'ExamSetup/GetAllMainExam/'
                   }).then(function successCallback(response) {
                      $scope.mainExams = response.data.results;
                      
                       $scope.total_count = response.data.totalcount;
                       //console.log(response.data);
                   }, function errorCallback(response) {
                       toastr["warning"](response.data.Message);
                   });
                   //$scope.AspNetRoles = $scope.data;
                   //console.log($scope.data.totalcount);
                   // $scope.totalcount = 3; //$scope.data.totalcount;
        }
        $scope.getSubject =  function getSubject() { // Get Subject List By VSCG
            //if ($scope.mform.$invalid)
            //    return;
            //blockUI.start(); // spinning Start
            $scope.SubjectSetups = [];
            var searchtxt = $scope.search;
            if ($scope.search == 'undefined' || $scope.search == '') {
                searchtxt = 'null';
            }
            $http({
                method: 'GET',
                url: baseUrl + 'SubjectSetup/GetAllSubject/' + $scope.ResultProcess.ClassId + '/' + $scope.ResultProcess.SessionId
            }).then(function successCallback(response) {
                $scope.SubjectSetups = response.data;
                $scope.total_count = response.data.totalcount;
                if ($scope.pagesize == -1)
                    $scope.pagesize = 500;
                //blockUI.stop();  // spinning Finished
            }, function errorCallback(response) {
                toastr["info"](response.data.message);
                blockUI.stop();
            });
        }
         
        
        
        $scope.SubWiseProcess = function SubWiseProcess() {
            if ($scope.mform.$invalid) {
                return;
            }
            blockUI.start("Proccessing");
            $http({
                method: 'POST',
                url: baseUrl + 'Result/SubResultProcess/',
                data: $scope.ResultProcess
            }).then(function successCallback(response) {
                $scope.Classes = response.data.results;
                toastr["success"](response.data.message);
                blockUI.stop();
            }, function errorCallback(response) {
                toastr["error"](response.data.Message);
                blockUI.stop();
            });
        }

        $scope.SubjectLock = function SubjectLock() {
            if ($scope.mform.$invalid)
                return;
            blockUI.start("Proccessing");
            $http({
                method: 'POST',
                url: baseUrl + 'Result/SubWiseResultLock/',
                data: $scope.ResultProcess
            }).then(function successCallback(response) {
                toastr["success"](response.data.message);
                blockUI.stop();
            }, function errorCallback(response) {
                toastr["error"](response.data.Message);
                blockUI.stop();
            });
        }
        $scope.ClearProccess = function ClearProccess() {
            if ($scope.mform.$invalid)
                return;
            blockUI.start("Proccessing");
            $http({
                method: 'POST',
                url: baseUrl + 'Result/SubWiseResultProcessClear/',
                data: $scope.ResultProcess
            }).then(function successCallback(response) {
                toastr["success"](response.data.message);
                blockUI.stop();
            }, function errorCallback(response) {
                toastr["error"](response.data.Message);
                blockUI.stop();
            });

        };
        $scope.GetLog = function GetLog() {
            if ($scope.mform.$invalid)
                return;
            $scope.Logs = [];
            blockUI.start("Getting Log");
            $http({
                method: 'POST',
                url: baseUrl + 'Result/GetProccesSubjectLog/',
                data: $scope.ResultProcess
            }).then(function successCallback(response) {
                $scope.Logs = response.data.results;
                toastr["success"](response.data.message);
                blockUI.stop();
            }, function errorCallback(response) {
                toastr["error"](response.data.message);
                blockUI.stop();
            });

        };
               function getAllClasses() {
                   $http({
                       method: 'GET',
                       url: baseUrl + 'SetupInstitution/GetClass/'
                   }).then(function successCallback(response) {
                       $scope.Classes = response.data.results;
                   }, function errorCallback(response) {
                       toastr["info"](response.data.message);
                   });
               }

               function getAllCommons() {
                   $scope.CommonFeilds = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'Common/GetCommonItem/'
                   }).then(function successCallback(response) {
                       $scope.CommonFeilds = response.data.results;
                   }, function errorCallback(response) {
                       toastr["info"](response.data.message);
                   });
               }
               function getTerms() {
                   $scope.Terms = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'SetupInstitution/GetAllTerm/'
                   }).then(function successCallback(response) {
                       // this callback will be called asynchronously
                       // when the response is available
                       $scope.Terms = response.data.results;
                       $scope.total_count = response.data.totalcount;
                       //console.log(response.data);
                   }, function errorCallback(response) {
                       toastr["warning"](response.data.Message);
                   });

               }

           }]);
    </script>

}

