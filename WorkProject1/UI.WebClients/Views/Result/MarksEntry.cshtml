
@{
    ViewBag.Title = "Marks Entry";
}
<style type="text/css">
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .AbsentMark {
        color: white;
        background-color: coral;
    }

    .ZeroMark {
        color: #4800ff;
        background-color: wheat !important;
    }
</style>
<div class="portlet box blue-hoki" ng-controller="MarksUploadCntrl">
    <div class="portlet-title">
        <div class="caption">
            <i class="fa fa-user-plus"></i>Filter
        </div>

    </div>
    <div class="portlet-body form">
        <!-- BEGIN FORM-->
        <form class="form-horizontal" ng-submit="Search()" name="frmFilter" method="post" enctype="multipart/form-data" novalidate>
            <div class="form-body">

                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Version :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted  && frmFilter.Version.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.VersionID" required name="Version" ng-options="studentInfo.VersionId as studentInfo.VersionName for studentInfo in CommonFeilds.Version">
                                    <option value="" selected>Please Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.Version.$error.required " class="help-block">Version Required</span>

                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Session :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SessionId.$invalid}">
                                <select class="form-control" name="SessionId" ng-model="StudentExamFilter.SessionId" required ng-options="studentInfo.SessionId as studentInfo.SessionName for studentInfo in CommonFeilds.Session | filter:{VersionId:StudentExamFilter.VersionId}:true">
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SessionId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Branch :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.BranchID.$invalid }">
                                <select class="form-control" name="BranchID" ng-model="StudentExamFilter.BranchID" ng-options="studentInfo.BranchId as studentInfo.BranchName for studentInfo in CommonFeilds.Branch" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.BranchID.$error.required" class="help-block">Branch Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Shift :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.Shift.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.ShiftId" name="Shift" ng-options="studentInfo.ShiftId as studentInfo.ShiftName for studentInfo in CommonFeilds.Shift | filter:{BranchId:StudentExamFilter.BranchID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.Shift.$error.required" class="help-block">Shift Required</span>

                            </div>
                        </div>

                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Class :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.ClassId.$invalid}">
                                <select class="form-control" name="ClassId" ng-disabled="StudentExamFilter.VersionID == null" ng-model="StudentExamFilter.ClassId" ng-change="GetGroup(StudentExamFilter.ClassId)" ng-options="studentInfo.ClassId as studentInfo.ClassName for studentInfo in CommonFeilds.ClassInfo | filter:{VersionId:StudentExamFilter.VersionID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.ClassId.$error.required " class="help-block">Class Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Group :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' : isSubmitted && frmFilter.GroupId.$invalid}">
                                <select class="form-control" name="GroupId" ng-change="getSubjects(); GetSection();" ng-model="StudentExamFilter.GroupId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="G.GroupId as G.GroupName for G in Groups" required>
                                    <option value="" selected="selected">Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.GroupId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Section :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SectionId.$invalid }">
                                <select class="form-control" name="SectionId" ng-model="StudentExamFilter.SectionId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="S.SectionId as S.SectionName for S in Sections" required>
                                    @*FilterSer by Shahin 17July2017*@
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SectionId.$error.required" class="help-block">Section Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Subject :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SubID.$invalid}">
                                <select class="form-control" name="SubID" ng-model="StudentExamFilter.SubjectID" ng-change="getMainExam();" ng-options="item.SubID as item.SubjectName for item in Subjects" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SubID.$error.required " class="help-block">Subject Required</span>
                            </div>
                        </div>


                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Main Exam :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.mainExam.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.MainExamId" ng-change="getSubExam();" name="mainExam" ng-options="mainexam.MainExamId as mainexam.MainExamName for mainexam in MainExams" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.mainExam.$error.required" class="help-block">Main Exam Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Sub Exam :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.subExam.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.SubExamId" ng-change="getDividedExam()" required name="subExam" ng-options="item.SubExamId as item.SubExamName for item in SubExams">
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.subExam.$error.required" class="help-block">Sub Exam Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Divided Exam :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.DividedExam.$invalid }">
                                <select class="form-control" ng-model="StudentExamFilter.DividedExamId" required name="DividedExam" ng-options="item.DividedExamId as item.DividedExamName for item in DividedExams">
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.DividedExam.$error.required " class="help-block">Divided Exam Required</span>
                            </div>
                        </div>
                        <div class="form-group">

                            <div class="col-md-10">
                                <button ng-click="isSubmitted=true" class="btn green">Search</button>

                                <div class="btn-group">
                                    <button class="btn bg-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false" style="width:80px">
                                        Report
                                        <i class="fa fa-angle-down"></i>
                                    </button>
                                    <ul class="dropdown-menu" role="menu">
                                        <li>
                                            <a href="" ng-click="MarksEntryReport();">
                                                <i class="fa fa-eye"></i> Marks Entry Report
                                            </a>
                                        </li>
                                        <li>
                                            <a href="" ng-click="AbsentStudentList();">
                                                <i class="fa fa-eye"></i> Absent Student List
                                            </a>
                                        </li>
                                        <li>
                                            <a href="" ng-click="MarksEntrySummery();">
                                                <i class="fa fa-eye"></i> Marks Entry Summery
                                            </a>
                                        </li>
                                    </ul>
                                </div>

                                @*<a style="margin-left:3px;" href="@Url.Action("StudentMarks","Report")?VersionID={{StudentExamFilter.VersionID}}&SessionId={{StudentExamFilter.SessionId}}&BranchID={{StudentExamFilter.BranchID}}&ShiftID={{StudentExamFilter.ShiftId}}&ClassId={{StudentExamFilter.ClassId}}&GroupId={{StudentExamFilter.GroupId}}&SectionId={{StudentExamFilter.SectionId}}&SubjectID={{StudentExamFilter.SubjectID}}&MainExamId={{StudentExamFilter.MainExamId}}&SubExamId={{StudentExamFilter.SubExamId}}&DividedExamId={{StudentExamFilter.DividedExamId}}" class="btn btn-primary" target="_blank">Report</a>*@
                                <a ng-click="ResetSource()" class="btn red">Reset</a>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </form>

    </div>
    <div class="panel">
        <!-- Default panel contents onkeypress="return isNumberKey(event);"   onkeypress="return (event.charCode == 8 || event.charCode == 0) ? null : event.charCode >= 48 && (event.charCode <= 57 || event.charCode !=110) "-->
        <div class="panel-heading bg-green-haze-opacity">
            <h3 class="panel-title" style="color:#ffffff; font-size:large">Student Records</h3>
        </div>
        <div class="panel-body">
            <table class="table table-bordered table-inverse fixed-table-toolbar">
                <thead class="btn-primary">
                    <tr>
                        <th> ID </th>
                        <th> Roll </th>
                        <th> Name </th>
                        <th> Absent </th>
                        <th> Full Mark </th>
                        <th> Obtain Mark </th>
                        <th> Action </th>
                    </tr>
                </thead>
                <tbody>
                    <tr ng-class="{'bg-red-haze' : item.ObtainMarks == 0}" ng-repeat="item in StudentInfos">
                        <td> {{item.StudentInsID}} </td>
                        <td> {{item.RollNo}} </td>
                        <td width="25%"> {{item.FullName}} </td>
                        <td width="10%"><input type="checkbox" id="Absent" ng-model="item.IsAbsent" ng-checked="item.IsAbsent==1" /></td>
                        <td width="25%">{{item.FullMarks}}<span ng-show="item.IsAbsent==1" style="color:#000000; font-weight:bold">&nbsp;&nbsp;&nbsp;A</span></td>
                        <td width="25%" ng-class="{ 'has-error' : item.FullMarks < item.ObtainMarks}">
                            <input type="number" ng-disabled="item.IsAbsent == 1" min="0" ng-model="item.ObtainMarks" ng-class="{AbsentMark: item.ObtainMarks == 0 && item.IsAbsent==1, ZeroMark: item.ObtainMarks == 0 && item.IsAbsent==0}" ng-click="touchClick(item);" class="form-control inputs" placeholder="Obtain Mark">
                            <span class="help-block" ng-show="(item.FullMarks < item.ObtainMarks)">Invalid!</span>
                        </td>
                        <td width="5%">
                            <a href="javascript:;" ng-click="MainExamDeleteMark(item)" ng-show="item.MarksId!=0" class="btn btn-icon-only red">
                                <i class="fa fa-trash">&nbsp;</i>
                            </a>
                        </td>
                    </tr>
                    <tr ng-show="StudentInfos.length > 0">
                        <td colspan="10">
                            <button ng-click="Save()" ng-disabled="MainExamMarkValidation() || btnDis" class="btn btn-primary pull-right"> <i ng-show="spin" class="fa fa-spinner fa-spin" style="font-size:20px"></i> Save &nbsp;</button>
                            <button ng-click="MainExamDeleteAllMark()" ng-disabled="MainExamDeleteValidation()" class="btn red pull-right"> Delete &nbsp;</button>
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
        <!-- Table -->
    </div>
    <!-- END FORM-->
</div>


@section Scripts{

    <script type="text/javascript">
        OEMSApp.controller("MarksUploadCntrl", ["$scope", "$http", "SweetAlert", "blockUI", "$window",
          function ($scope, $http, SweetAlert, blockUI, $window) {

              init();
              function init() {
                  initialize();
                  getAllDropdowns();
                  //getAllVersions();
                  getAllCommons();
                  //getSubjects();
              }
              function initialize() {
                  $scope.touchList = [];
                  $scope.touch = 0;
                  $scope.StudentExamFilter = {};
                  $scope.studentInfo = {};
                  $scope.StudentInfos = [];
                  $scope.Dropdowns = [];
                  $scope.CommonFeilds = [];
                  $scope.Versions = [];
                  $scope.MainExams = [];
                  $scope.SubExams = [];
                  $scope.DividedExams = [];
                  $scope.Subjects = [];

                  $scope.currentPage = 1;
                  $scope.pageno = 1;
                  $scope.pagesize = 10;
                  $scope.total_count = 12;
                  $scope.txtsearch = '';
                  $scope.getAllDropdowns = getAllDropdowns;
                  $scope.Search = Search;
                  $scope.getAllCommons = getAllCommons;


                  $scope.btnDis = false;
                  $scope.spin = false;

              };
              $scope.touchClick = function touchClick(item) {
                  if (item.MarksId == 0) {
                      var add = true;
                      angular.forEach($scope.touchList, function (value, key) {
                          if (value == item.StudentIID) {
                              add = false;
                          }
                      });
                      if (add) {
                          $scope.touchList.push(id);
                      }
                  }
              };
              function setProgress(s) {
                  $scope.btnDis = s;
                  $scope.spin = s;
              }

              $scope.MarksEntryReport = function MarksEntryReport() {
                  if ($scope.StudentExamFilter.VersionID == null) {
                      toastr["info"]("Select a Version.");
                  } else if ($scope.StudentExamFilter.SessionId == null) {
                      toastr["info"]("Select a Session.");
                  } else if ($scope.StudentExamFilter.BranchID == null) {
                      toastr["info"]("Select a Branch.");
                  } else if ($scope.StudentExamFilter.ShiftId == null) {
                      toastr["info"]("Select a Shift.");
                  } else if ($scope.StudentExamFilter.ClassId == null) {
                      toastr["info"]("Select a Class.");
                  } else if ($scope.StudentExamFilter.GroupId == null) {
                      toastr["info"]("Select a Group.");
                  } else if ($scope.StudentExamFilter.SectionId == null) {
                      toastr["info"]("Select a Section.");
                  } else if ($scope.StudentExamFilter.SubjectID == null) {
                      toastr["info"]("Select a Subject.");
                  } else if ($scope.StudentExamFilter.MainExamId == null) {
                      toastr["info"]("Select a MainExam.");
                  }
                  else {
                      $scope.uri = "@Url.Action("MarksEntryReportAll", "Report")?VersionID=" + $scope.StudentExamFilter.VersionID + "&SessionId=" + $scope.StudentExamFilter.SessionId + "&BranchID=" + $scope.StudentExamFilter.BranchID + "&ShiftID=" + $scope.StudentExamFilter.ShiftId + "&ClassId=" + $scope.StudentExamFilter.ClassId + "&GroupId=" + $scope.StudentExamFilter.GroupId + "&SectionId=" + $scope.StudentExamFilter.SectionId + "&SubjectID=" + $scope.StudentExamFilter.SubjectID + "&MainExamId=" + $scope.StudentExamFilter.MainExamId;
                      $window.open($scope.uri, '_blank');
                  }
              };
              $scope.AbsentStudentList = function AbsentStudentList() {
                  if ($scope.StudentExamFilter.VersionID == null) {
                      toastr["info"]("Select a Version.");
                  } else if ($scope.StudentExamFilter.SessionId == null) {
                      toastr["info"]("Select a Session.");
                  } else if ($scope.StudentExamFilter.BranchID == null) {
                      toastr["info"]("Select a Branch.");
                  } else if ($scope.StudentExamFilter.ShiftId == null) {
                      toastr["info"]("Select a Shift.");
                  } else if ($scope.StudentExamFilter.ClassId == null) {
                      toastr["info"]("Select a Class.");
                  } else if ($scope.StudentExamFilter.GroupId == null) {
                      toastr["info"]("Select a Group.");
                  } else if ($scope.StudentExamFilter.SectionId == null) {
                      toastr["info"]("Select a Section.");
                  } else if ($scope.StudentExamFilter.SubjectID == null) {
                      toastr["info"]("Select a Subject.");
                  } else if ($scope.StudentExamFilter.MainExamId == null) {
                      toastr["info"]("Select a MainExam.");
                  }
                  else {
                      $scope.uri = "@Url.Action("MarksEntryReportforAbsentAZero", "Report")?VersionID=" + $scope.StudentExamFilter.VersionID + "&SessionId=" + $scope.StudentExamFilter.SessionId + "&BranchID=" + $scope.StudentExamFilter.BranchID + "&ShiftID=" + $scope.StudentExamFilter.ShiftId + "&ClassId=" + $scope.StudentExamFilter.ClassId + "&GroupId=" + $scope.StudentExamFilter.GroupId + "&SectionId=" + $scope.StudentExamFilter.SectionId + "&SubjectID=" + $scope.StudentExamFilter.SubjectID + "&MainExamId=" + $scope.StudentExamFilter.MainExamId;
                      $window.open($scope.uri, '_blank');
                  }
              };
              $scope.MarksEntrySummery = function MarksEntrySummery() {
                  if ($scope.StudentExamFilter.VersionID == null) {
                      toastr["info"]("Select a Version.");
                  } else if ($scope.StudentExamFilter.SessionId == null) {
                      toastr["info"]("Select a Session.");
                  } else if ($scope.StudentExamFilter.BranchID == null) {
                      toastr["info"]("Select a Branch.");
                  } else if ($scope.StudentExamFilter.ShiftId == null) {
                      toastr["info"]("Select a Shift.");
                  } else if ($scope.StudentExamFilter.ClassId == null) {
                      toastr["info"]("Select a Class.");
                  } else if ($scope.StudentExamFilter.GroupId == null) {
                      toastr["info"]("Select a Group.");
                  } else if ($scope.StudentExamFilter.SectionId == null) {
                      toastr["info"]("Select a Section.");
                  } else if ($scope.StudentExamFilter.MainExamId == null) {
                      toastr["info"]("Select a MainExam.");
                  }
                  else {
                      $scope.uri = "@Url.Action("MarksEntryReportSummery", "Report")?VersionID=" + $scope.StudentExamFilter.VersionID + "&SessionId=" + $scope.StudentExamFilter.SessionId + "&BranchID=" + $scope.StudentExamFilter.BranchID + "&ShiftID=" + $scope.StudentExamFilter.ShiftId + "&ClassId=" + $scope.StudentExamFilter.ClassId + "&GroupId=" + $scope.StudentExamFilter.GroupId + "&SectionId=" + $scope.StudentExamFilter.SectionId +"&MainExamId=" + $scope.StudentExamFilter.MainExamId;
                      $window.open($scope.uri, '_blank');
                  }
              };
              $scope.MainExamMarkValidation = function MainExamMarkValidation() {
                  var res = false;
                  angular.forEach($scope.StudentInfos, function (value, key) {
                      if (value.FullMarks < value.ObtainMarks) {
                          res = true;

                      }

                  });


                  return res;
              };
              $scope.MainExamDeleteValidation = function MainExamDeleteValidation() {
                  var res = false;
                  angular.forEach($scope.StudentInfos, function (value, key) {
                      if (value.MarksId > 0)
                          res = false;
                      else
                          res = true;
                  });
                  return res;
              };

              $scope.GetGroup = function GetGroup(classid) {
                  $scope.Groups = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetGroup/' + classid
                  }).then(function successCallback(response) {
                      $scope.Groups = response.data.results;


                  }, function errorCallback(response) {
                      toastr["info"](response.data.Message);
                  });

              }
              $scope.GetSection = function GetSection() {
                  $scope.Sections = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetSection/' + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ShiftId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId
                  }).then(function successCallback(response) {
                      $scope.Sections = response.data.results;


                  }, function errorCallback(response) {
                      toastr["info"](response.data.Message);
                  });

              }

              function Report() {
                  $scope.StudentInfos = [];
                  if ($scope.frmFilter.$invalid == true)
                      return;
                  $http({
                      method: 'POST',
                      url: baseUrl + 'Report/StudentMarks/',
                      data: $scope.StudentExamFilter
                  }).then(function successCallback(response) {
                      $scope.StudentInfos = response.data.results;
                      toastr["success"](response.data.message);
                      blockUI.stop();
                  }, function errorCallback(response) {
                      toastr["info"]("opps! Something went wrong. Data not found.");
                      blockUI.stop();
                  });

              };
              function Search() {
                  // $scope.frmFilter.$touched = true; //By Kawsar
                  $scope.StudentInfos = [];


                  if ($scope.frmFilter.$invalid == true)
                      return;


                  blockUI.start();
                  $http({
                      method: 'POST',
                      url: baseUrl + 'Result/GetMarks/',
                      headers: { 'Content-Type': undefined },
                      transformRequest: function (data) {
                          var formData = new FormData();
                          formData.append('Fill', JSON.stringify($scope.StudentExamFilter));
                          return formData;
                      },
                      data: { studentBasicInfo: $scope.studentInfo }

                  }).then(function (response) {
                      $scope.StudentInfos = response.data.results;
                      toastr["success"](response.data.message);
                      blockUI.stop();
                  });


              };


              $scope.Save = function Save() {
                  if ($scope.StudentInfos.length == 0)
                      return;
                  var total = $scope.StudentInfos.length;
                  var touched = $scope.touchList.length;
                  alert($scope.touchList.length + '' + $scope.StudentInfos.length);
                  var zero = 0;
                  if (touched == 0) {
                      setProgress(true);
                      $http({
                          method: 'POST',
                          url: baseUrl + 'Result/SaveMarks/',
                          data: $scope.StudentInfos
                      }).then(function successCallback(response) {
                          $scope.spin = false;
                          setProgress(false);
                          toastr["success"](response.data.message);

                          Search();
                      }, function errorCallback(response) {
                          toastr["info"](response.data.message);
                      });
                  }
                  else //if(total > touched)
                  {
                      angular.forEach($scope.StudentInfos, function (value, key) {
                          if (value.ObtainMarks == 0 && value.MarksId == 0) {
                              zero += 1;
                          }
                      });

                      SweetAlert.swal({
                          title: "Total Student : " + total + ",  Marks Entry Left : " + touched + " Are you sure to Save it ?", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55",
                          confirmButtonText: "Yes, Save it!",
                          closeOnConfirm: false
                      },
                      function (isConfirm) {
                          if (isConfirm) {
                              $http({
                                  method: 'POST',
                                  url: baseUrl + 'Result/SaveMarks/',
                                  data: $scope.StudentInfos
                              }).then(function successCallback(response) {
                                  if (response.data.HasError == true) {
                                      toastr["error"](response.data.message);
                                  }
                                  else {
                                      SweetAlert.swal("Saved!", "Your data has been Saved.", "success");
                                  }
                                  Search();
                              }, function errorCallback(response) {
                                  toastr["error"](response.data.message);
                              });
                          }
                      });
                  }


              };
              $scope.MainExamDeleteMark = function MainExamDeleteMark(item) {
                  $http({
                      method: 'DELETE',
                      url: baseUrl + 'Result/DeleteStudentMark/' + item.MarksId + '/' + item.MainExamID
                  }).then(function successCallback(response) {
                      toastr["info"](response.data.message);
                      Search();
                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });
              }
              $scope.MainExamDeleteAllMark = function MainExamDeleteAllMark() {
                  if ($scope.StudentInfos.length == 0)
                      return;
                  $http({
                      method: 'POST',
                      url: baseUrl + 'Result/BulkDeleteStudentMark/',
                      data: $scope.StudentExamFilter
                  }).then(function successCallback(response) {
                      toastr["info"](response.data.message);
                      Search();
                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });
              }
              $scope.Reset = function Reset() {

                  initialize();
                  $scope.frmFilter.$setPristine();
                  $scope.frmFilter.$setUntouched();
                  getAllDropdowns();
                  getAllCommons();
                  $scope.isSubmitted = false;
              };
              $scope.ResetSource = function ResetSource() {
                  $scope.StudentInfos = [];
              };


              function getAllDropdowns() {
                  $scope.Dropdowns = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetAllDropDown/'
                  }).then(function successCallback(response) {
                      $scope.Dropdowns = response.data.results;


                  }, function errorCallback(response) {
                      toastr["info"](response.data.Message);
                  });
              }

              function getAllCommons() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;

                  }, function errorCallback(response) {
                      toastr["info"](response.data.Message);
                  });
              }
              function getAllVersions() {
                  $scope.Versions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Versions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }
              function getAllSeesion() {
                  $scope.Sessions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Sessions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }

              function getAllShift() {
                  $scope.Shifts = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Shifts = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }
              function getAllClass() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }
              function getAllSection() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                      //$scope.CommonFeilds = [];
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }


              $scope.getMainExam = function getMainExam() {
                  $scope.MainExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetMainExamForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId + "/" + $scope.StudentExamFilter.SubjectID
                  }).then(function successCallback(response) {

                      $scope.MainExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }
              $scope.getSubExam = function getSubExam() {
                  $scope.SubExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetSubExamForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId + "/" + $scope.StudentExamFilter.SubjectID + "/" + $scope.StudentExamFilter.MainExamId
                  }).then(function successCallback(response) {
                      $scope.SubExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });

              };
              $scope.getDividedExam = function getDividedExam() {
                  $scope.DividedExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetDividedExamForMarksEntry/' + $scope.StudentExamFilter.SubExamId
                  }).then(function successCallback(response) {
                      $scope.DividedExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });

              };

              $scope.getSubjects = function getSubjects() {
                  $scope.Subjects = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'SubjectSetup/GetAllSubjectForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.GroupId
                  }).then(function successCallback(response) {


                      $scope.Subjects = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.Message);
                  });
              }
          }]);
    </script>

    <script type="text/javascript">

        $(document).ready(function ($) {

            // Disable scroll when focused on a number input.
            $(document).on('focus', 'input[type=number]', function (e) {
                $(this).on('wheel', function (e) {
                    e.preventDefault();
                });
            });

            // Restore scroll on number inputs.
            $(document).on('blur', 'input[type=number]', function (e) {
                $(this).off('wheel');
            });

            // Disable up and down keys.
            $(document).on('keydown', 'input[type=number]', function (e) {
                if (e.which == 38 || e.which == 40)
                    e.preventDefault();
                //if (e.keyCode == 13) {
                //    $(this).next('input[type=number]').focus();
                //}
                if (e.which === 13 || e.which == 40) {
                    var index = $('.inputs').index(this) + 1;
                    $('.inputs').eq(index).focus();
                }
                if (e.which == 38) {
                    var index = $('.inputs').index(this) - 1;
                    $('.inputs').eq(index).focus();
                }
            });
            //// onkeypress="return (event.charCode == 8 || event.charCode == 0) ? null : event.charCode >= 48 && event.charCode <= 57)
            // function isNumberKey(evt) {
            //     var charCode = (evt.which) ? evt.which : evt.keyCode;
            //     var type = true;
            //     //if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            //     //    type = false;
            //     if (charCode == 107 || charCode == 109)
            //         type = false;

            //     return type;
            // }


        });
    </script>
}
