
@{
    ViewBag.Title = "Class Wise Process";
}

<div ng-controller="classResultProcessClt">
    <!-- Begin: life time stats -->
    <div class="portlet light bordered">
        <div class="portlet-title">
            <div class="caption">
                <i class="icon-settings font-green"></i>
                <span class="caption-subject font-green sbold uppercase">@ViewBag.Title</span>
            </div>
            @*<div class="actions">
                <div class="btn-group btn-group-solid">
                    <button ng-click="resetForm()" class="btn green" data-target="#addmodal" data-toggle="modal"> <i class="fa fa-plus"></i> Add @ViewBag.Title</button>
                </div>
            </div>*@
        </div>
        <form novalidate name="mform" class="form-horizontal" id="form_sample_1">

            <div class="row" style="margin-right: 1%;">
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Session.$invalid}">
                        <label class="col-md-5 control-label">
                            Session:
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.SessionId" name="Session" ng-options="studentInfo.SessionId as studentInfo.SessionName for studentInfo in CommonFeilds.Session" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Session.$error.required" class="help-block">Session Required</span>

                        </div>
                    </div>
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.class.$invalid}">
                        <label class="col-md-5 control-label">
                            Class
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.ClassId" ng-change="getSubject()" name="class" required ng-options="class.ClassId as class.ClassName for class in CommonFeilds.ClassInfo">
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.class.$error.required" class="help-block">Class Name Required</span>
                        </div>
                    </div>

                </div>
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Term.$invalid}">
                        <label class="col-md-5 control-label">
                            Term :
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-model="ResultProcess.TermId" ng-disabled="ResultProcess.ClassId==null" name="Term" ng-options="T.TermId as T.Name for T in Terms |filter:{ClassId:ResultProcess.ClassId}:true" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Term.$error.required" class="help-block">Term Required</span>
                        </div>
                    </div>
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.Subject.$invalid}">
                        <label class="col-md-5 control-label">
                            Subject :
                            @*<span class="required">*</span>*@
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-disabled="ResultProcess.ClassId==null" ng-model="ResultProcess.SubjectId" name="Subject" ng-options="S.SubID as S.SubjectName for S in SubjectSetups.results |filter:{ClassId:ResultProcess.ClassId}:true" >
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.Subject.$error.required" class="help-block">Subject Required</span>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group" ng-class="{ 'has-error' : submitted1 && mform.MainExam.$invalid}">
                        <label class="col-md-5 control-label">
                            Main Exam :
                            <span class="required">*</span>
                        </label>
                        <div class="col-md-7">
                            <select class="form-control" ng-disabled="ResultProcess.TermId==null" ng-change="ShowCheckBox(ResultProcess.MainExamId)" ng-model="ResultProcess.MainExamId" name="MainExam" ng-options="T.MainExamId as T.MainExamName for T in mainExams |filter:{TermId:ResultProcess.TermId}:true" required>
                                <option value="" selected="selected">Choose Option</option>
                            </select>
                            <div class="form-control-focus"> </div>
                            <span ng-show="submitted1 && mform.MainExam.$error.required" class="help-block">Main Exam Required</span>
                        </div>
                    </div>
           
                </div>
            
            </div>
            <div class="row" style="margin-top: 1%;margin-right: 1%;">
                <div class="col-md-4">
              
                
                </div>
                <div class="col-md-8">
                    <div class="pull-right">
                        <button ng-click="ClassResultProcess();submitted1=true" class="btn green">Process</button>
                        @*<button ng-click="ResultUnPublish();submitted1=true" class="btn red">Un Publish</button>*@
                        <button ng-click="submitted=true;ClearProccess()" class="btn yellow-mint">Process Clear</button>
                        <button ng-click="ClassLock();submitted1=true" class="btn purple">Class Lock</button>
                        <button ng-click="ClassUnLock();submitted1=true" class="btn purple">Class UnLock</button>
                        <button ng-click="SubjectUnlock();submitted1=true" class="btn blue">Subject Unlock</button>
                        <button ng-click="submitted=true;isShowLog=true;GetLog()" class="btn blue">Log </button>
                        <button type="reset" ng-click="submitted1=false" class="btn red">Clear</button>
                    </div>
                </div>
            </div>
            <div class="panel" ng-show="isShowLog">
                <div class="panel-body scrollHeight">
                    <table class="table table-bordered table-inverse logtableStyle">
                        <thead class="btn-primary">
                            <tr>
                                <th colspan="2" class="text-center" style="padding:5px 10px;text-transform:uppercase"> Logs </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in Logs">
                                <td style="width:25%">{{item.LogTime | date:'medium'}}</td>
                                <td>{{item.Msg}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </form>
    </div>
    <!-- End: life time stats -->
    <!--Modal Area Start-->
  
    <!--Modal Area End-->
</div>
@section Scripts{
    <script type="text/javascript">
        OEMSApp.controller("classResultProcessClt", ["$scope", "$http", "SweetAlert","blockUI","filterFilter",
           function ($scope, $http, SweetAlert, blockUI, filterFilter) {
               init();
               function init() {
                   initialize();
                   getAllCommons();
                   getmainExams(1);
                   getTerms(1);
               }
               function initialize() {
                   $scope.aemodalTitle = "Add Main Exam";
                   $scope.currentPage = 1;
                   $scope.pageno = 1;
                   $scope.pagesize = 10;
                   $scope.total_count = 12;
                   $scope.search = '';
                  
                   $scope.ResultProcess = {};
                   $scope.mainExams = [];
                 
                   $scope.res = {};
                   $scope.data = {};
                   $scope.resetForm = resetForm;
                   //$scope.getSubject = getSubject;
                   $scope.Classes = [];
                   $scope.CommonFeilds = [];

                   $scope.pageSizeArray = [];
                   $scope.pageSizeArray.push({ value: 5, text: 5 });
                   $scope.pageSizeArray.push({ value: 10, text: 10 });
                   $scope.pageSizeArray.push({ value: 20, text: 20 });
                   $scope.pageSizeArray.push({ value: 50, text: 50 });
                   $scope.currentPage = 1;
                   $scope.pageSize = 10;
                   $scope.ChkShow = null;
               }
               function resetForm() {
                   $scope.aemodalTitle = "Add Main Exam";
                   $scope.mainExam = {};
                   $scope.addform.$setUntouched();
                   $scope.addform.$setPristine();
                   $scope.submitted = false;
                   $scope.MainExamId = '';
                   $scope.mainExam.MainExamId = 0;
                   getmainExams(1);
               }
           function getmainExams() {
                   $scope.mainExams = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'ExamSetup/GetAllMainExam/'
                   }).then(function successCallback(response) {
                      $scope.mainExams = response.data.results;
                    
                       $scope.total_count = response.data.totalcount;
                       //console.log(response.data);
                   }, function errorCallback(response) {
                       toastr["warning"](response.data.Message);
                   });
                 
               }
           $scope.ShowCheckBox = function ShowCheckBox(MainExamId) {
             $scope.ChkShow=  filterFilter($scope.mainExams, { MainExamId: MainExamId })[0].IsLock;
           }
             
           $scope.ClassResultProcess = function ClassResultProcess() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
                   $http({
                       method: 'POST',
                       url: baseUrl + 'Result/ClassWiseResultProcess/',
                       data: $scope.ResultProcess
                   }).then(function successCallback(response) {
                       $scope.Classes = response.data.results;
                       toastr["success"](response.data.message);
                       blockUI.stop();
                   }, function errorCallback(response) {
                       toastr["error"](response.data.Message);
                       blockUI.stop();
                   });
           }

           
           $scope.ResultPublish = function ResultPublish() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/ClassResultPublish/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {
                   $scope.Classes = response.data.results;
                   toastr["success"](response.data.message);
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });
           }
           $scope.ResultUnPublish = function ResultUnPublish() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/ClassResultUnPublish/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {
                   $scope.Classes = response.data.results;
                   toastr["success"](response.data.message);
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });
           }
           $scope.ClearProccess = function ClearProccess() {
               if ($scope.mform.$invalid)
                   return;
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/ClassResultProcessClasssClear/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {
                   toastr["success"](response.data.message);
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });

           };

           $scope.SubjectUnlock = function SubjectUnlock() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/SubWiseResultUnLock/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {
                 
                   toastr["success"](response.data.message);
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });
           }
           $scope.getSubject = function getSubject() { // Get Subject List By VSCG
               //if ($scope.mform.$invalid)
               //    return;
               //blockUI.start(); // spinning Start
               $scope.SubjectSetups = [];
               var searchtxt = $scope.search;
               if ($scope.search == 'undefined' || $scope.search == '') {
                   searchtxt = 'null';
               }
               $http({
                   method: 'GET',
                   url: baseUrl + 'SubjectSetup/GetAllSubject/' + $scope.ResultProcess.ClassId + '/' + $scope.ResultProcess.SessionId
               }).then(function successCallback(response) {
                   $scope.SubjectSetups = response.data;
                   $scope.total_count = response.data.totalcount;
                   if ($scope.pagesize == -1)
                       $scope.pagesize = 500;
                   //blockUI.stop();  // spinning Finished
               }, function errorCallback(response) {
                   toastr["info"](response.data.message);
                   blockUI.stop();
               });
           }
           $scope.ClassLock = function ClassLock() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/ClassWiseLock/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {

                   toastr["success"](response.data.message);
                   getmainExams();
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });
           }
           $scope.ClassUnLock = function ClassUnLock() {
               if ($scope.mform.$invalid) {
                   return;
               }
               blockUI.start("Proccessing");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/ClassWiseUnLock/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {

                   toastr["success"](response.data.message);
                   getmainExams();
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.Message);
                   blockUI.stop();
               });
           }
           $scope.GetLog = function GetLog() {
               if ($scope.mform.$invalid)
                   return;
               $scope.Logs = [];
               blockUI.start("Getting Log");
               $http({
                   method: 'POST',
                   url: baseUrl + 'Result/GetProccesClassLog/',
                   data: $scope.ResultProcess
               }).then(function successCallback(response) {
                   $scope.Logs = response.data.results;
                   toastr["success"](response.data.message);
                   blockUI.stop();
               }, function errorCallback(response) {
                   toastr["error"](response.data.message);
                   blockUI.stop();
               });

           };
               function getAllClasses() {
                   $http({
                       method: 'GET',
                       url: baseUrl + 'SetupInstitution/GetClass/'
                   }).then(function successCallback(response) {
                       $scope.Classes = response.data.results;
                   }, function errorCallback(response) {
                       toastr["info"](response.data.message);
                   });
               }

               function getAllCommons() {
                   $scope.CommonFeilds = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'Common/GetCommonItem/'
                   }).then(function successCallback(response) {
                       $scope.CommonFeilds = response.data.results;
                   }, function errorCallback(response) {
                       toastr["info"](response.data.message);
                   });
               }
               function getTerms() {
                   $scope.Terms = [];
                   $http({
                       method: 'GET',
                       url: baseUrl + 'SetupInstitution/GetAllTerm/'
                   }).then(function successCallback(response) {
                       // this callback will be called asynchronously
                       // when the response is available
                       $scope.Terms = response.data.results;
                       $scope.total_count = response.data.totalcount;
                       //console.log(response.data);
                   }, function errorCallback(response) {
                       toastr["warning"](response.data.Message);
                   });

               }

           }]);
    </script>

}




