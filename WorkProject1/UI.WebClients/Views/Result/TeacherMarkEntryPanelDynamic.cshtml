@{
    ViewBag.Title = "Marks Entry";
    Layout = "~/Views/Shared/_EmpLayout.cshtml";
}
<style type="text/css">
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    .AbsentMark {
        color: white;
        background-color: coral;
    }
    .ZeroMark {
        color: #4800ff;
        background-color: wheat !important;
    }
        .input-group-addon {
        padding: 6px 6px!important;
    }
</style>
<div class="portlet box blue-hoki" ng-controller="MarksUploadCntrl">
    <div class="portlet-title">
        <div class="caption">
            <i class="fa fa-user-plus"></i>Student Mark Entry Panel
        </div>
    </div>
    <div class="portlet-body form">
        <!-- BEGIN FORM-->
        <form class="form-horizontal" ng-submit="Search()" name="frmFilter" method="post" enctype="multipart/form-data" novalidate>
            <div class="form-body">

                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Version :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted  && frmFilter.Version.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.VersionID" required name="Version" ng-options="studentInfo.VersionId as studentInfo.VersionName for studentInfo in CommonFeilds.Version">
                                    <option value="" selected>Please Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.Version.$error.required " class="help-block">Version Required</span>

                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Session :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SessionId.$invalid}">
                                <select class="form-control" name="SessionId" ng-model="StudentExamFilter.SessionId" required ng-options="studentInfo.SessionId as studentInfo.SessionName for studentInfo in CommonFeilds.Session | filter:{VersionId:StudentExamFilter.VersionId}:true">
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SessionId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Branch :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.BranchID.$invalid }">
                                <select class="form-control" name="BranchID" ng-model="StudentExamFilter.BranchID" ng-options="studentInfo.BranchId as studentInfo.BranchName for studentInfo in CommonFeilds.Branch" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.BranchID.$error.required" class="help-block">Branch Required</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Shift :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.Shift.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.ShiftId" name="Shift" ng-options="studentInfo.ShiftId as studentInfo.ShiftName for studentInfo in CommonFeilds.Shift | filter:{BranchId:StudentExamFilter.BranchID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.Shift.$error.required" class="help-block">Shift Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Class :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.ClassId.$invalid}">
                                <select class="form-control" name="ClassId" ng-disabled="StudentExamFilter.VersionID == null" ng-model="StudentExamFilter.ClassId" ng-change="GetGroup(StudentExamFilter.ClassId)" ng-options="studentInfo.ClassId as studentInfo.ClassName for studentInfo in CommonFeilds.ClassInfo | filter:{VersionId:StudentExamFilter.VersionID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.ClassId.$error.required " class="help-block">Class Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Group :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' : isSubmitted && frmFilter.GroupId.$invalid}">
                                <select class="form-control" name="GroupId" ng-change="getSubjects(); GetSection();" ng-model="StudentExamFilter.GroupId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="G.GroupId as G.GroupName for G in Groups" required>
                                    <option value="" selected="selected">Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.GroupId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>
                      
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Section :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SectionId.$invalid }">
                                <select class="form-control" name="SectionId" ng-model="StudentExamFilter.SectionId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="S.SectionId as S.SectionName for S in Sections" required>
                                    @*FilterSer by Shahin 17July2017*@
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SectionId.$error.required" class="help-block">Section Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Subject :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SubID.$invalid}">
                                <select class="form-control" name="SubID" ng-model="StudentExamFilter.SubjectID" ng-change="getMainExam();" ng-options="item.SubID as item.SubjectName for item in Subjects" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SubID.$error.required " class="help-block">Subject Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Main Exam :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.mainExam.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.MainExamId" ng-change="getSubExam();" name="mainExam" ng-options="mainexam.MainExamId as mainexam.MainExamName for mainexam in MainExams" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.mainExam.$error.required" class="help-block">Main Exam Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-10">
                                <button ng-click="isSubmitted=true" class="btn green">Search</button>
                                @*<a style="margin-left:3px;" href="@Url.Action("StudentMarks","Report")?VersionID={{StudentExamFilter.VersionID}}&SessionId={{StudentExamFilter.SessionId}}&BranchID={{StudentExamFilter.BranchID}}&ShiftID={{StudentExamFilter.ShiftId}}&ClassId={{StudentExamFilter.ClassId}}&GroupId={{StudentExamFilter.GroupId}}&SectionId={{StudentExamFilter.SectionId}}&SubjectID={{StudentExamFilter.SubjectID}}&MainExamId={{StudentExamFilter.MainExamId}}&SubExamId={{StudentExamFilter.SubExamId}}&DividedExamId={{StudentExamFilter.DividedExamId}}" class="btn btn-primary" target="_blank">Report</a>*@
                                <a ng-click="ResetSource()" class="btn red">Reset</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="panel">
        <!-- Default panel contents onkeypress="return isNumberKey(event);"   onkeypress="return (event.charCode == 8 || event.charCode == 0) ? null : event.charCode >= 48 && (event.charCode <= 57 || event.charCode !=110) "-->
        <div class="panel-heading bg-green-haze-opacity">
            <h3 class="panel-title" style="color:#ffffff; font-size:large">Student Mark Entry</h3>
        </div>
        <div class="panel-body">
            <table class="table table-bordered table-inverse fixed-table-toolbar">
                <thead class="btn-primary">
                    <tr>
                        <th rowspan="2"> ID </th>
                        <th rowspan="2"> Roll </th>
                        <th rowspan="2"> Name </th>
                        <td colspan="{{item.SubExamCount}}" ng-repeat="item in StudentMarks[0].MarksDetails" style="text-align:center">
                            {{item.SubExamName}}
                        </td>
                    </tr>
                    <tr>
                        <th ng-repeat="item in StudentMarks[0].MarksDetails" style="text-align:center">
                            <span class="pull-left">Full </span>
                            <span>{{item.DividedExamName}}</span>
                            @*<span class="pull-right">Pass </span>*@
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr ng-class="{'bg-red-haze' : item.ObtainMarks == 0}" ng-repeat="item in StudentMarks track by $index">
                        <td width="6%"> {{item.StudentInsID}} </td>
                        <td width="5%"> {{item.RollNo}} </td>
                        <td width="14%"> {{item.FullName}} </td>
                        <td width="15%" ng-repeat="item1 in item.MarksDetails track by $index" ng-class="{ 'has-error' : item1.FullMarks < item1.Marks}">
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">{{item1.FullMarks}}</span>
                                <input type="number" ng-disabled="item1.IsAbsent == 1" min="0" max="{{item1.FullMarks}}" ng-blur="SaveSingleMark(item,item1,$event)"
                                       ng-model="item1.Marks" ng-class="{AbsentMark: (item1.Marks == 0 && item1.IsAbsent==true), ZeroMark: (item1.Marks == 0 && item1.IsAbsent==false)}"
                                       class="form-control inputs{{$index+1}}" placeholder="Obtain Mark" id="{{$index+1}}_{{$parent.$index+1}}">
                                @*<span class="input-group-addon" id="basic-addon1">{{item1.PassMarks}}</span>*@
                                <span class="help-block" ng-show="(item1.FullMarks < item1.Marks)">Invalid!</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <!-- Table -->
    </div>
    <!-- END FORM-->  
</div>
@section Scripts{
    <script type="text/javascript">
        OEMSApp.controller("MarksUploadCntrl", ["$scope", "$http", "SweetAlert", "blockUI", "$window",
          function ($scope, $http, SweetAlert, blockUI, $window) {
              init();
              function init() {
                  initialize();
                  getAllDropdowns();
                  //getAllVersions();
                  getAllCommons();
                  //getSubjects();
              }
              function initialize() {
                  $scope.touchList = [];
                  $scope.touch = 0;
                  $scope.StudentExamFilter = {};
                  $scope.studentInfo = {};
                  $scope.StudentMarks = [];
                  $scope.Dropdowns = [];
                  $scope.CommonFeilds = [];
                  $scope.Versions = [];
                  $scope.MainExams = [];
                  $scope.SubExams = [];
                  $scope.DividedExams = [];
                  $scope.Subjects = [];
                  $scope.currentPage = 1;
                  $scope.pageno = 1;
                  $scope.pagesize = 10;
                  $scope.total_count = 12;
                  $scope.txtsearch = '';
                  $scope.getAllDropdowns = getAllDropdowns;
                  $scope.Search = Search;
                  $scope.getAllCommons = getAllCommons;

                  $scope.btnDis = false;
                  $scope.spin = false;

              };
              $scope.touchClick = function touchClick(item) {
                  if (item.MarksId == 0) {
                      var add = true;
                      angular.forEach($scope.touchList, function (value, key) {
                          if (value == item.StudentIID) {
                              add = false;
                          }
                      });
                      if (add) {
                          $scope.touchList.push(id);
                      }
                  }
              };
              function setProgress(s) {
                  $scope.btnDis = s;
                  $scope.spin = s;
              }

      
            
             
              $scope.GetGroup = function GetGroup(classid) {
                  $scope.Groups = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetGroup/' + classid
                  }).then(function successCallback(response) {
                      $scope.Groups = response.data.results;


                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });

              }
              $scope.GetSection = function GetSection() {
                  $scope.Sections = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetSection/' + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ShiftId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId
                  }).then(function successCallback(response) {
                      $scope.Sections = response.data.results;
                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });
              }

              function Search() {
                  // $scope.frmFilter.$touched = true; //By Kawsar
                  $scope.StudentMarks = [];
                  if ($scope.frmFilter.$invalid == true)
                      return;
                  blockUI.start();
                  $http({
                      method: 'POST',
                      url: baseUrl + 'Result/GetMarksByMainExam/',
                      headers: { 'Content-Type': undefined },
                      transformRequest: function (data) {
                          var formData = new FormData();
                          formData.append('Fill', JSON.stringify($scope.StudentExamFilter));
                          return formData;
                      },
                      data: { studentBasicInfo: $scope.studentInfo }
                  }).then(function (response) {
                      $scope.StudentMarks = response.data.results;
                      toastr["success"](response.data.message);
                      blockUI.stop();
                  });
              };

              $scope.SaveSingleMark = function SaveSingleMark(Studl, Marks, ObtainMark) {
                  setProgress(true);
                  $scope.SingleMark = {};
                  $scope.SingleMark.VersionId = $scope.StudentExamFilter.VersionID;
                  $scope.SingleMark.SessionId = $scope.StudentExamFilter.SessionId;
                  $scope.SingleMark.ShiftId = $scope.StudentExamFilter.ShiftId;
                  $scope.SingleMark.ClassId = $scope.StudentExamFilter.ClassId;
                  $scope.SingleMark.GroupId = $scope.StudentExamFilter.GroupId;
                  $scope.SingleMark.SectionId = $scope.StudentExamFilter.SectionId;
                  $scope.SingleMark.StudentIID = Studl.StudentIID;
                  $scope.SingleMark.StudentInsID = Studl.StudentInsID;
                  $scope.SingleMark.FullMarks = Marks.FullMarks;
                  $scope.SingleMark.PassMark = Marks.PassMarks;
                  $scope.SingleMark.MainExamID = Marks.MainExamId;
                  $scope.SingleMark.SubExamID = Marks.SubExamId;
                  $scope.SingleMark.DividedExamID = Marks.DividedExamId;
                  $scope.SingleMark.SubjectID = Marks.SubjectId;
                  $scope.SingleMark.ObtainMarks = ObtainMark.target.value;
                  $scope.SingleMark.IsAbsent = Marks.IsAbsent;
                  $scope.SingleMark.MarksId = Marks.MarksId;
                  $http({
                      method: 'POST',
                      url: baseUrl + 'Result/SaveMarksOnChange/',
                      data: $scope.SingleMark
                  }).then(function successCallback(response) {
                      $scope.spin = false;
                      setProgress(false);
                      if (response.data.HasError) {
                          ObtainMark.target.value = 0;
                          toastr["warning"](response.data[0].message);
                          console.log(response.data);
                      }
                      
                  }, function errorCallback(response) {
                      //HasError = true
                      toastr["warning"](response.data[0].message);

                      console.log(response.data);
                  });
              }
           
              $scope.Reset = function Reset() {
                  initialize();
                  $scope.frmFilter.$setPristine();
                  $scope.frmFilter.$setUntouched();
                  getAllDropdowns();
                  getAllCommons();
                  $scope.isSubmitted = false;
              };
              $scope.ResetSource = function ResetSource() {
                  $scope.StudentMarks = [];
              };


              function getAllDropdowns() {
                  $scope.Dropdowns = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetAllDropDown/'
                  }).then(function successCallback(response) {
                      $scope.Dropdowns = response.data.results;


                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });
              }

              function getAllCommons() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;

                  }, function errorCallback(response) {
                      toastr["info"](response.data.message);
                  });
              }
              function getAllVersions() {
                  $scope.Versions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Versions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllSeesion() {
                  $scope.Sessions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Sessions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }

              function getAllShift() {
                  $scope.Shifts = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Shifts = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllClass() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllSection() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                      //$scope.CommonFeilds = [];
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }


              $scope.getMainExam = function getMainExam() {
                  $scope.MainExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetMainExamForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId + "/" + $scope.StudentExamFilter.SubjectID
                  }).then(function successCallback(response) {

                      $scope.MainExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              $scope.getSubExam = function getSubExam() {
                  $scope.SubExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetSubExamForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId + "/" + $scope.StudentExamFilter.SubjectID + "/" + $scope.StudentExamFilter.MainExamId
                  }).then(function successCallback(response) {
                      $scope.SubExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });

              };
              $scope.getDividedExam = function getDividedExam() {
                  $scope.DividedExams = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'ExamSetup/GetDividedExamForMarksEntry/' + $scope.StudentExamFilter.SubExamId
                  }).then(function successCallback(response) {
                      $scope.DividedExams = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });

              };

              $scope.getSubjects = function getSubjects() {
                  $scope.Subjects = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'SubjectSetup/GetAllSubjectForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.GroupId
                  }).then(function successCallback(response) {


                      $scope.Subjects = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
          }]);
    </script>

    <script type="text/javascript">

        $(document).ready(function ($) {

            // Disable scroll when focused on a number input.
            $(document).on('focus', 'input[type=number]', function (e) {
                $(this).on('wheel', function (e) {
                    e.preventDefault();
                });
            });

            // Restore scroll on number inputs.
            $(document).on('blur', 'input[type=number]', function (e) {
                $(this).off('wheel');
            });

            $(document).on('keydown', 'input[type=number]', function (e) {
                var id = $(this).attr('id');
                var data = id.split("_");


                if (e.which == 38 || e.which == 40)
                    e.preventDefault();
                //if (e.keyCode == 13) {
                //    $(this).next('input[type=number]').focus();
                //}


                if (e.which === 13 || e.which == 40) {
                    var num = parseInt(data[1]) + 1;
                    var ID = "#" + data[0] + "_" + String(num);
                    $(ID).focus();
                }

                if (e.which == 38) {
                    var num = parseInt(data[1]) - 1;
                    var ID = "#" + data[0] + "_" + String(num);
                    $(ID).focus();
                }

            });
            //// onkeypress="return (event.charCode == 8 || event.charCode == 0) ? null : event.charCode >= 48 && event.charCode <= 57)
            // function isNumberKey(evt) {
            //     var charCode = (evt.which) ? evt.which : evt.keyCode;
            //     var type = true;
            //     //if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            //     //    type = false;
            //     if (charCode == 107 || charCode == 109)
            //         type = false;

            //     return type;
            // }


        });
    </script>
}
