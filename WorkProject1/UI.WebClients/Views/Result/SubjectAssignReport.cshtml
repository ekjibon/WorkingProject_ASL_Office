
@{
    ViewBag.Title = "Subject Assign Report";
}
<style type="text/css">
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>
<div class="portlet box blue-hoki" ng-controller="MarksUploadCntrl">
    <div class="portlet-title">
        <div class="caption">
            <i class="fa fa-user-plus"></i>Filter
        </div>

    </div>
    <div class="portlet-body form">
        <!-- BEGIN FORM-->
        <form class="form-horizontal"  name="frmFilter" method="post" enctype="multipart/form-data" novalidate>
            <div class="form-body">

                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Version :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted  && frmFilter.Version.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.VersionID" required name="Version" ng-options="studentInfo.VersionId as studentInfo.VersionName for studentInfo in CommonFeilds.Version">
                                    <option value="" selected>Please Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.Version.$error.required " class="help-block">Version Required</span>

                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Session :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SessionId.$invalid}">
                                <select class="form-control" name="SessionId" ng-model="StudentExamFilter.SessionId" required ng-options="studentInfo.SessionId as studentInfo.SessionName for studentInfo in CommonFeilds.Session | filter:{VersionId:StudentExamFilter.VersionId}:true">
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SessionId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Branch :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.BranchID.$invalid }">
                                <select class="form-control" name="BranchID" ng-model="StudentExamFilter.BranchID" ng-options="studentInfo.BranchId as studentInfo.BranchName for studentInfo in CommonFeilds.Branch" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.BranchID.$error.required" class="help-block">Branch Required</span>
                            </div>
                        </div>
                        

                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Shift :
                            </label>
                            <div class="col-md-7" ng-class="{'has-error' : isSubmitted && frmFilter.Shift.$invalid}">
                                <select class="form-control" ng-model="StudentExamFilter.ShiftId" name="Shift" ng-options="studentInfo.ShiftId as studentInfo.ShiftName for studentInfo in CommonFeilds.Shift | filter:{BranchId:StudentExamFilter.BranchID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.Shift.$error.required" class="help-block">Shift Required</span>

                            </div>
                        </div>
                        @*<div class="form-group">
                            <label class="col-md-5 control-label">
                                Class :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.ClassId.$invalid}">
                                <select class="form-control" name="ClassId" ng-disabled="StudentExamFilter.VersionID == null" ng-model="StudentExamFilter.ClassId" ng-change="GetGroup(StudentExamFilter.ClassId)" ng-options="studentInfo.ClassId as studentInfo.ClassName for studentInfo in CommonFeilds.ClassInfo | filter:{VersionId:StudentExamFilter.VersionID}:true" required>
                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.ClassId.$error.required " class="help-block">Class Required</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-5 control-label">
                                Group :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' : isSubmitted && frmFilter.GroupId.$invalid}">
                                <select class="form-control" name="GroupId" ng-change="getSubjects(); GetSection();" ng-model="StudentExamFilter.GroupId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="G.GroupId as G.GroupName for G in Groups" required>
                                    <option value="" selected="selected">Select</option>
                                </select>
                                <div class="form-control-focus"> </div>
                                <span ng-show="isSubmitted && frmFilter.GroupId.$error.required" class="help-block">Session Required</span>
                            </div>
                        </div>*@
                    </div>

                    <div class="col-md-4">
                        @*<div class="form-group">
                            <label class="col-md-5 control-label">
                                Section :
                            </label>
                            <div class="col-md-7" ng-class="{ 'has-error' :isSubmitted && frmFilter.SectionId.$invalid }">
                                <select class="form-control" name="SectionId" ng-model="StudentExamFilter.SectionId" ng-disabled="StudentExamFilter.ClassId==null" ng-options="S.SectionId as S.SectionName for S in Sections" required>

                                    <option value="" selected="selected">Please Select</option>
                                </select>
                                <span ng-show="isSubmitted && frmFilter.SectionId.$error.required" class="help-block">Section Required</span>
                            </div>
                        </div>*@
                        <div class="form-group">

                            <div class="col-md-offset-4 col-md-8" >
                                <a style="margin-left:3px;" href="@Url.Action("GetSubjectAssignRepot","Report")?VersionID={{StudentExamFilter.VersionID}}&SessionId={{StudentExamFilter.SessionId}}&BranchID={{StudentExamFilter.BranchID}}&ShiftID={{StudentExamFilter.ShiftId}}" class="btn btn-primary" target="_blank">Report</a>
                                @*<a style="margin-left:3px;" href="@Url.Action("GetSubjectAssignRepot","Report")?VersionID={{StudentExamFilter.VersionID}}&SessionId={{StudentExamFilter.SessionId}}&BranchID={{StudentExamFilter.BranchID}}&ShiftID={{StudentExamFilter.ShiftId}}&ClassId={{StudentExamFilter.ClassId}}&GroupId={{StudentExamFilter.GroupId}}&SectionID={{StudentExamFilter.SectionId}}" class="btn btn-primary" target="_blank">Report</a>*@
                                <a ng-click="ResetSource()" class="btn red">Reset</a>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </form>

    </div>
   
    <!-- END FORM-->
</div>


@section Scripts{

    <script type="text/javascript">

        OEMSApp.controller("MarksUploadCntrl", ["$scope", "$http", "SweetAlert", "blockUI",
          function ($scope, $http, SweetAlert, blockUI) {

                  init();
                  function init() {
                      initialize();
                      getAllDropdowns();
                      //getAllVersions();
                      getAllCommons();
                      //getSubjects();
                  }
                  function initialize() {
                      $scope.StudentExamFilter = {};
                      $scope.studentInfo = {};
                      $scope.StudentInfos = [];
                      $scope.Dropdowns = [];
                      $scope.CommonFeilds = [];
                      $scope.Versions = [];
                      $scope.MainExams = [];
                      $scope.SubExams = [];
                      $scope.DividedExams = [];
                      $scope.Subjects = [];

                      $scope.currentPage = 1;
                      $scope.pageno = 1;
                      $scope.pagesize = 10;
                      $scope.total_count = 12;
                      //$scope.txtsearch = '';
                      $scope.getAllDropdowns = getAllDropdowns;
                      // $scope.Search = Search;
                      $scope.getAllCommons = getAllCommons;


                      $scope.btnDis = false;
                      $scope.spin = false;

                  };
                  function setProgress(s) {
                      $scope.btnDis = s;
                      $scope.spin = s;
                  }
                  //$scope.MainExamMarkValidation = function MainExamMarkValidation() {
                  //    var res = false;
                  //    angular.forEach($scope.StudentInfos, function (value, key) {
                  //        if (value.FullMarks < value.ObtainMarks) {
                  //            res = true;
                  //        }
                  //    });
                  //    return res;
                  //};
                  //$scope.MainExamDeleteValidation = function MainExamDeleteValidation() {
                  //    var res = false;
                  //    angular.forEach($scope.StudentInfos, function (value, key) {
                  //        if (value.MarksId > 0)
                  //            res = false;
                  //        else
                  //            res = true;
                  //    });
                  //    return res;
                  //};

                  $scope.GetGroup = function GetGroup(classid) {
                      $scope.Groups = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Common/GetGroup/' + classid
                      }).then(function successCallback(response) {
                          $scope.Groups = response.data.results;


                      }, function errorCallback(response) {
                          toastr["info"](response.data.message);
                      });

                  }
                  $scope.GetSection = function GetSection() {
                      $scope.Sections = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Common/GetSection/' + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.ShiftId + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.GroupId
                      }).then(function successCallback(response) {
                          $scope.Sections = response.data.results;


                      }, function errorCallback(response) {
                          toastr["info"](response.data.message);
                      });

                  }

                  function Report() {
                      $scope.StudentInfos = [];
                      if ($scope.frmFilter.$invalid == true)
                          return;
                      $http({
                          method: 'POST',
                          url: baseUrl + 'Report/StudentMarks/',
                          data: $scope.StudentExamFilter
                      }).then(function successCallback(response) {
                          $scope.StudentInfos = response.data.results;
                          toastr["success"](response.data.message);
                          blockUI.stop();
                      }, function errorCallback(response) {
                          toastr["info"]("opps! Something went wrong. Data not found.");
                          blockUI.stop();
                      });

                  };
                  //function Search() {
                  //   // $scope.frmFilter.$touched = true; //By Kawsar
                  //    $scope.StudentInfos = [];
                  //    if ($scope.frmFilter.$invalid == true)
                  //        return;
                  //    blockUI.start();
                  //    $http({
                  //        method: 'POST',
                  //        url: baseUrl + 'Result/GetMarks/',
                  //        headers: { 'Content-Type': undefined },
                  //        transformRequest: function (data) {
                  //            var formData = new FormData();
                  //            formData.append('Fill', JSON.stringify($scope.StudentExamFilter));
                  //            return formData;
                  //        },
                  //        data: { studentBasicInfo: $scope.studentInfo 
                  //    }).then(function (response) {
                  //        $scope.StudentInfos = response.data.results;
                  //        toastr["success"](response.data.message);
                  //        blockUI.stop();
                  //    });
                  // };

              //$scope.Reset = function Reset() {
              //        initialize();
              //        $scope.frmFilter.$setPristine();
              //        $scope.frmFilter.$setUntouched();
              //        getAllDropdowns();
              //        getAllCommons();
              //        $scope.isSubmitted = false;
              //    };
              $scope.ResetSource = function ResetSource() {
                 // $scope.StudentInfos = [];
                  $scope.StudentExamFilter = {};
              };


              function getAllDropdowns() {
                      $scope.Dropdowns = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Common/GetAllDropDown/'
                      }).then(function successCallback(response) {
                          $scope.Dropdowns = response.data.results;


                      }, function errorCallback(response) {
                          toastr["info"](response.data.message);
                      });
                  }

              function getAllCommons() {
                      $scope.CommonFeilds = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Common/GetCommonItem/'
                      }).then(function successCallback(response) {
                          $scope.CommonFeilds = response.data.results;

                      }, function errorCallback(response) {
                          toastr["info"](response.data.message);
                      });
              }
              function getAllVersions() {
                  $scope.Versions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Versions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllSeesion() {
                  $scope.Sessions = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Sessions = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }

              function getAllShift() {
                  $scope.Shifts = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.Shifts = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllClass() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }
              function getAllSection() {
                  $scope.CommonFeilds = [];

                  $http({
                      method: 'GET',
                      url: baseUrl + 'Common/GetCommonItem/'
                  }).then(function successCallback(response) {
                      $scope.CommonFeilds = response.data.results;
                      //$scope.CommonFeilds = [];
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }

              $scope.getSubjects = function getSubjects() {
                 $scope.Subjects = [];
                  $http({
                      method: 'GET',
                      url: baseUrl + 'SubjectSetup/GetAllSubjectForMarksEntry/' + $scope.StudentExamFilter.VersionID + "/" + $scope.StudentExamFilter.ClassId + "/" + $scope.StudentExamFilter.SessionId + "/" + $scope.StudentExamFilter.GroupId
                  }).then(function successCallback(response) {


                      $scope.Subjects = response.data.results;
                  }, function errorCallback(response) {
                      toastr["error"](response.data.message);
                  });
              }

              }]);
    </script>

    <script type="text/javascript">


        $(document).ready(function ($) {

            // Disable scroll when focused on a number input.
            $(document).on('focus', 'input[type=number]', function (e) {
                $(this).on('wheel', function (e) {
                    e.preventDefault();
                });
            });

            // Restore scroll on number inputs.
            $(document).on('blur', 'input[type=number]', function (e) {
                $(this).off('wheel');
            });

            // Disable up and down keys.
            $(document).on('keydown', 'input[type=number]', function (e) {
                if (e.which == 38 || e.which == 40)
                    e.preventDefault();
                //if (e.keyCode == 13) {
                //    $(this).next('input[type=number]').focus();
                //}
                if (e.which === 13 ||  e.which == 40) {
                    var index = $('.inputs').index(this) + 1;
                    $('.inputs').eq(index).focus();
                }
                if ( e.which == 38 ) {
                    var index = $('.inputs').index(this) - 1;
                    $('.inputs').eq(index).focus();
                }
            });


        });
    </script>
}






