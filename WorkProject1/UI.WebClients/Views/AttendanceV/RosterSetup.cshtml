
@{
    ViewBag.Title = "Roster Setup";
}
<style>
    .DrpdwnWidth ul {
        width: 300px;
    }
</style>
<div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid" ng-controller="EmpRosterCTRL">
    <div class="row">
        <div class="kt-portlet kt-portlet--mobile">
            <div class="kt-portlet__head kt-portlet__head--lg">
                <div class="kt-portlet__head-label">
                    <h3 class="kt-portlet__head-title">
                        <!----Titel Text-->
                        Roster Setup
                        <!----Titel Text -->
                    </h3>
                </div>
                <div class="kt-portlet__head-toolbar">
                    <div class="kt-portlet__head-wrapper">
                        <div class="dropdown dropdown-inline">
                            @*<button type="button" class="btn btn-brand btn-icon-sm" data-toggle="modal" data-target="#addmodal" aria-haspopup="true" aria-expanded="false">
                                <!----Add Button -->
                                <i class="flaticon2-plus"></i> Add New
                                <!----Add Button -->
                            </button>*@
                        </div>
                    </div>
                </div>
            </div>

            <div class="kt-portlet__body">
                <div class="row">
                    <div class="col-md-3" ng-hide="Temporary">
                        <input type="checkbox" ng-click="resetForm()" ng-model="Regular" /> <span> Regular</span>
                    </div>
                    <div class="col-md-3" ng-hide="Regular">
                        <input type="checkbox" ng-click="resetForm()" ng-model="Temporary" /> <span> Manual Update</span>

                    </div>
                </div>
                <form class="form-horizontal" id="formEmpRoster" name="formEmpRoster" novalidate>
                    <div class="row" ng-show="Regular">
                        <div class="col-md-4">

                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.Branch.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    Emp Branch :
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <select class="form-control" ng-model="EmpRoster.BranchId" ng-required="Regular" name="Branch" ng-options="B.BranchId as B.BranchName for B in CommonFeilds.Branch">
                                        <option value="" selected="selected">Choose Option</option>
                                    </select>

                                    <div class="form-control-focus"> </div>
                                    <span ng-show="submitted && formEmpRoster.Branch.$error.required" class="help-block">Branch Required</span>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.Category.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    Emp Category :
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <select class="form-control" ng-model="EmpRoster.EmpCategory" ng-required="Regular" name="Category" ng-options="item.CategoryID as item.CategoryName for item in CommonFeilds.Category">
                                        <option value="" selected="selected">Choose Option</option>
                                    </select>
                                    <div class="form-control-focus"> </div>
                                    <span ng-show="submitted && formEmpRoster.Category.$error.required" class="help-block">Category Required</span>
                                </div>
                            </div>

                        </div>
                        <div class="col-md-4">

                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.CalenderTitle.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    Calender Title :
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <select class="form-control" ng-disabled="EmpRoster.EmpCategory==null" ng-model="EmpRoster.CalendarId" ng-required="Regular" name="CalenderTitle" ng-options="item.Id as item.Title for item in EmpCalenderList | filter:{EmpCategory:EmpRoster.EmpCategory}:true">
                                        <option value="" selected="selected">Choose Option</option>
                                    </select>

                                    <div class="form-control-focus"> </div>
                                    <span ng-show="submitted && formEmpRoster.CalenderTitle.$error.required" class="help-block">Calender Title Required</span>
                                </div>
                            </div>

                            <div class="form-group row">
                                <div class="col-md-2">
                                    <button class="btn btn-primary btn-sm pull-right" ng-click="ShowEmpRosterList();submitted=true">Show</button>
                                </div>
                                <div class="col-md-2">
                                    <a class="btn btn-success btn-sm pull-right" ng-click="Save()">Save</a>
                                </div>
                                <div class="col-md-2">
                                    <a class="btn btn-danger btn-sm" ng-click="resetForm()">Reset</a>
                                </div>
                                <div class="col-md-2">
                                    <a href="@Url.Action("EmpRosterRegularSummeryReport","Report")?BranchId={{EmpRoster.BranchId}}&CategoryId={{EmpRoster.EmpCategory}}&CalendarId={{EmpRoster.CalendarId}}" target="_blank" class="btn btn-success btn-sm "> Report </a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row" ng-show="Temporary">
                        <div class="col-md-4">
                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.StudentId.$invalid}">
                                <label class="col-sm-4 control-label pull-left" style="text-align:right">
                                    Emp:
                                </label>
                                <div class="col-md-6 DrpdwnWidth">
                                    @*<input type="text" ng-model="employeeInfo.EmpID" class="form-control" placeholder="EmpID" name="EmpID">*@
                                    <input type="text"
                                           name="StudentId"
                                           ng-model="Std"
                                           typeahead-on-select='onSelect($item, $model, $label)' ng-required="Temporary"
                                           placeholder="Search name/ID SMS Notification"
                                           uib-typeahead="i  as i.Text for i in Search($viewValue)"
                                           typeahead-loading="loadingLocations" typeahead-no-results="noResults" class="form-control">
                                    <i ng-show="loadingLocations" class="glyphicon glyphicon-refresh"></i>
                                    <div ng-show="noResults"><i class="glyphicon glyphicon-remove"></i> No Results Found</div>
                                    <input type="hidden" name="StudentIID" ng-value="Std.Value" />
                                    <div class="form-control-focus"> </div>
                                </div>
                            </div>
                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.Remarks.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    Remarks:
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <input type="text" ng-model="EmpRoster.Remarks" name="Remarks" ng-required="IsRequired" class="form-control" />
                                    <span ng-show="submitted &&  formEmpRoster.Remarks.$error.required" class="help-block">Remarks Required</span>
                                </div>
                            </div>

                        </div>


                        <div class="col-md-4">

                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.FormDate.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    Form Date
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <input class="form-control" type="text" ng-click="p1=true" is-open="p1" readonly ng-model="EmpRoster.FromDate" placeholder="Form Date" uib-datepicker-popup="dd/MM/yyyy" name="FormDate" required />
                                    <span ng-show="submitted &&  formEmpRoster.FormDate.$error.required" class="help-block">Form Date Required</span>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group row" ng-class="{ 'has-error' : submitted && formEmpRoster.ToDate.$invalid}">
                                <label class="col-md-4 control-label" style="text-align:right">
                                    To Date
                                    <span class="required">*</span>
                                </label>
                                <div class="col-md-6">
                                    <input class="form-control" type="text" readonly ng-click="p2=true" is-open="p2" ng-model="EmpRoster.ToDate" placeholder="To Date" uib-datepicker-popup="dd/MM/yyyy" name="ToDate" required />
                                    <span ng-show="submitted &&  formEmpRoster.ToDate.$error.required" class="help-block">To Date Required</span>
                                </div>
                            </div>

                            <div class="form-group row">

                                <div class="col-md-4">

                                    <a class="btn btn-success btn-sm pull-right" ng-click="TemporaryRoster();submitted=true">Save</a>
                                </div>
                                <div class="col-md-2">
                                    <a class="btn btn-danger btn-sm pull-right" ng-click="resetForm()">Reset</a>
                                </div>

                                <div class="col-md-2">
                                    <a href="@Url.Action("EmpRosterTemSummeryReport","Report")?EmpId={{EmpRoster.EmpBasicInfoID}}" target="_blank" class="btn btn-success btn-sm ">Report</a>
                                </div>

                            </div>
                        </div>
                    </div>

                </form>
                <div class="table-container" style="margin-top: 5%;" ng-show="Temporary">
                    <div class="col-md-2"></div>
                    <div id="sample_3_wrapper" class="dataTables_wrapper no-footer col-md-8">
                        <div class="table-scrollable"> </div>
                        <form class="form-horizontal" id="formEmpRoster" name="formEmpRosterList">
                            <table class="table table-bordered table-hover rounded">
                                <thead>
                                    <tr class="btn-primary">
                                        <th>
                                            <input type="checkbox" id="all" ng-change="allDaysItems(allCheck);" ng-model="allCheck" ng-checked="allCheck" />

                                        </th>
                                        <th>Weekday Name</th>
                                        @*<th>Regular InTime</th>
                                <th>Regular OutTime</th>*@
                                        <th>Temporary In Time</th>
                                        <th>Temporary Out Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr ng-repeat="item in DayList" current-page="currentPage">
                                        <td><input type="checkbox" ng-change="singleItem(item.IsChecked);" ng-model="item.IsChecked" ng-checked="item.IsChecked" /></td>
                                        <td style="background-color:red" ng-show="item.Day=='Saturday'|| item.Day=='Friday'">{{item.Day}} (Weekend)</td>
                                        <td ng-hide="item.Day=='Saturday'|| item.Day=='Friday'">{{item.Day}}</td>
                                        <td><input type="time" ng-model="item.InTime" name="InTime" required class="form-control" /></td>
                                        <td><input type="time" ng-model="item.OutTime" name="OutTime" required class="form-control" /></td>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="form-group row">
                                <div class="col-md-4">

                                    <a class="btn btn-success pull-left" ng-click="DoforAll()">Do same for all</a>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-2"></div>
                </div>
                <div class="table-container" style="margin-top: 5%;" ng-show="Regular">
                    <div id="sample_3_wrapper" class="dataTables_wrapper no-footer">
                        <div class="row">
                            <div class="col-md-4 col-sm-5 col-xs-6">
                                <div class="form-group row">
                                    <div class="col-lg-3 col-md-5 col-sm-4 col-xs-8" style="padding-left:0px">
                                        <select class="form-control" ng-model="pageSize" ng-options="P.value as P.text for P in pageSizeArray"></select>
                                    </div>
                                    <div class="col-md-7  col-sm-8  col-xs-4">
                                        @*<label for="search" class="control-label" style="padding-top:5px">Items</label>*@
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 col-sm-3 col-xs-1">
                            </div>
                            <div class="col-md-4 col-sm-4 col-xs-5">
                                <div id="sample_3_filter" class="pull-right">
                                    <input ng-model="q" id="search" class="form-control" placeholder="Filter text">
                                </div>
                            </div>
                        </div>
                        <div class="table-scrollable"> </div>
                        <form class="form-horizontal" id="formEmpRoster" name="formEmpRosterList">
                            <table class="table table-bordered table-hover rounded">
                                <thead>
                                    <tr class="btn-primary">
                                        @*<th width="30%">Branch Name</th>*@
                                        <th ng-show="EmpRosterList.length > 0">
                                            <input type="checkbox" id="all" ng-change="allItems(allCheck);" ng-model="allCheck" ng-checked="allCheck" />
                                            @*<input type="checkbox" ng-model="AllChecked" ng-checked="item.IsChecked" />*@
                                            Mark
                                        </th>
                                        <th>Date Range</th>
                                        <th>Name</th>
                                        <th>In Time</th>
                                        <th>Out Time</th>
                                        <th>Remarks</th>
                                        @*<th>Action</th>*@
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr ng-show="EmpRosterList.length <= 0"><td colspan="5" style="text-align:center;"><i class="fa fa-refresh"></i> Loading new data!!</td></tr>
                                    <tr dir-paginate="item in EmpRosterList | filter:q  | itemsPerPage: pageSize " current-page="currentPage">
                                        <td><input type="checkbox" ng-change="singleItem(item.IsChecked);" ng-model="item.IsChecked" ng-checked="item.IsChecked" /></td>
                                        <td>{{item.StartDate | date:'dd-MM-yyyy'}} to {{item.EndDate | date:'dd-MM-yyyy'}}</td>
                                        <td>{{item.FullName}}</td>
                                        <td><input type="time" ng-model="item.InTime" ng-required="item.IsChecked" class="form-control" /></td>
                                        <td><input type="time" ng-model="item.OutTime" ng-required="item.IsChecked" class="form-control" /></td>
                                        <td><input type="text" ng-model="item.Remarks" class="form-control" /></td>
                                    </tr>

                                </tbody>
                            </table>
                        </form>
                        <div class="row">
                            <dir-pagination-controls boundary-links="true" template-url="~/assets/angular/lib/dirPagination.tpl.html"></dir-pagination-controls>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        OEMSApp.controller("EmpRosterCTRL", ["$scope", "$http", "SweetAlert", "blockUI", "$filter",
              function ($scope, $http, SweetAlert, blockUI, $filter) {
                  init();
                  function init() {
                      initialize();
                      getAllCommons();
                      getEmpClanderList();
                     // getTemporaryRostaerList();
                  }

                  function initialize() {
                      $scope.EmpRoster = {};
                      $scope.allCheck = false;


                      $scope.getProcessExistByMonth = [];
                      $scope.GetMonth = GetMonth;

                      $scope.submitted = false

                      $scope.EmpCalenderList = [];
                      $scope.TemporaryRostaerList = [];

                      $scope.showButton = false;
                      $scope.generalButton = false;
                      $scope.isCheckedOld = false;
                      $scope.isChecked = [];
                      $scope.isChange = false;
                      $scope.isChange1 = false;
                      $scope.IsRequired = false;



                      $scope.Months = [];
                      $scope.FeesMonthList = [];
                      $scope.FeesAutomatedMonthList = [];
                      $scope.pageSizeArray = [];
                      $scope.pageSizeArray.push({ value: 5, text: 5 });
                      $scope.pageSizeArray.push({ value: 10, text: 10 });
                      $scope.pageSizeArray.push({ value: 20, text: 20 });
                      $scope.pageSizeArray.push({ value: 50, text: 50 });
                      $scope.currentPage = 1;
                      $scope.pageSize = 10;

                      $scope.DayList = [];
                      $scope.DayList.push({ Day: 'Saturday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Sunday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Monday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Tuesday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Wednesday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Thursday', IsChecked: false });
                      $scope.DayList.push({ Day: 'Friday', IsChecked: false });

                  }
                  $scope.resetForm =  function resetForm() {

                      $scope.EmpRoster = {};

                      $scope.submitted = false;

                  }

                  //$scope.allDaysItemsWithValue = function allDaysItemsWithValue(c) {
                  //    angular.forEach($scope.DayList, function (value, key) {
                  //        if (c) {
                  //            value.IsChecked = true;
                  //        }
                  //        else {
                  //            value.IsChecked = false;
                  //        }
                  //    });
                  //};
                  $scope.DoforAll = function DoforAll() {

                      $scope.List = [];
                        //angular.forEach($scope.DayList, function (value, key) {                            
                        //    value.IsChecked = true;
                        //    //if (value.InTime != null) {
                        //    //    value.InTime = value.InTime;
                        //    //}

                        //});
                      angular.forEach($scope.DayList, function (item) {
                          //item.IsChecked = true;
                          if (item.IsChecked == true) {
                              var index = $scope.DayList.indexOf(item);
                              $scope.DayList[index + 1].InTime = item.InTime;
                              $scope.DayList[index + 1].OutTime = item.OutTime;
                              $scope.DayList[index + 1].IsChecked = true;
                              $scope.List.push(item);
                         }
                      });

                      if ($scope.List.length == 0) {
                          toastr["warning"]('At least One Select.');
                          return;
                      }



                  }

                  function getEmpClanderList() {
                      $scope.EmpCalenderList = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Attendance/GetEmpCalendarList/'
                      }).then(function successCallback(response) {
                          $scope.EmpCalenderList = response.data.results;

                      }, function errorCallback(response) {

                      });

                  }


                  $scope.chkChanged = function () {
                      $scope.isChange = true;
                      $http({
                          method: 'GET',
                          url: baseUrl + 'Attendance/GetYearRange/' + $scope.EmpRoster.CalendarId
                      }).then(function successCallback(response) {
                          $scope.EmpCalenderYearList = response.data.results;
                      }, function errorCallback(response) {

                      });



                  }

                  $scope.chkChanged1 = function () {
                      $scope.isChange1 = true;
                      $http({
                          method: 'GET',
                          url: baseUrl + 'Attendance/GetMonthRange/' + $scope.EmpRoster.CalendarId + '/' + $scope.EmpRoster.year
                      }).then(function successCallback(response) {
                          $scope.EmpCalenderMothList = response.data.results;
                          console.log(response.data.results);

                      }, function errorCallback(response) {

                      });
                  }

                  $scope.allItems = function allItems(c) {
                      angular.forEach($scope.EmpRosterList, function (value, key) {
                          if (c) {
                              value.IsChecked = true;
                          }
                          else {
                              value.IsChecked = false;
                          }
                      });
                  };

                  $scope.allDaysItems = function allDaysItems(c) {
                      angular.forEach($scope.DayList, function (value, key) {
                          if (c) {
                              value.IsChecked = true;
                          }
                          else {
                              value.IsChecked = false;
                          }
                      });
                  };

                  $scope.singleItem = function singleItem(n) {
                      $scope.DisCountDisplay = false;

                      $scope.allCheck = false;
                      angular.forEach($scope.EmpRosterList, function (value, key) {
                          if ($scope.IsChecked) {
                              if (value.IsChecked)
                                  $scope.allCheck =  true;
                              else
                                  $scope.allCheck = false;
                          }
                      });
                  };

                  $scope.ShowEmpRosterList = function () {
                      //debugger;

                      $scope.EmpRosterList = [];
                      $http({
                          method: 'POST',
                          url: baseUrl + 'Attendance/GetEmpRosterList/',
                          data: $scope.EmpRoster
                      }).then(function successCallback(response) {

                          $scope.EmpRosterList = response.data.results;
                          angular.forEach($scope.EmpRosterList, function (value, key) {
                              value.IsChecked = false;
                          });
                          console.log($scope.EmpRosterList);
                      }, function errorCallback(response) {

                      })
                  }


                  $scope.ShowEmployeeRoster = function () {

                      if ($scope.formEmpRoster.$invalid) {

                          return;
                      }
                      $http({
                          method: 'POST',
                          url: baseUrl + 'Attendance/GetEmployeeRoster/',
                          data: $scope.EmpRoster

                      }).then(function successCallback(response) {

                          $scope.EmployeeRoster = response.data.results;
                          console.log($scope.EmployeeRoster);
                          angular.forEach($scope.EmployeeRoster, function (value, key) {
                              value.IsChecked = true;
                          });
                      }, function errorCallback(response) {

                      })
                  }


                  $scope.TemporaryRoster = function TemporaryRoster() {
                     
                      $scope.List = [];

                      angular.forEach($scope.DayList, function (item) {
                          if (item.IsChecked == true) {
                              $scope.List.push(item);
                          }
                      });

                      if ($scope.List.length == 0) {
                          toastr["warning"]('At least One Select.');
                          return;
                      }

                    
                      blockUI.start("Proccessing");
                     // $scope.IsRequired = true;

                      if ($scope.formEmpRoster.$invalid) {

                          return;
                      }
                      $scope.EmpRoster.DayList = $scope.List;
                      $http({
                          method: 'POST',
                          url: baseUrl + '/Attendance/AddEmpRosterTemporary/',
                          data: $scope.EmpRoster
                      }).then(function successCallback(response) {
                          //CheckAllTypeProcess();
                          toastr["success"](response.data.message);
                          $scope.EmployeeTeporaryRosterList = [];
                          //GetProcessExistByMonth();
                          blockUI.stop();
                      }, function errorCallback(response) {
                          toastr["error"](response.data.Message);
                          blockUI.stop();
                      });
                  };

                  $scope.Save = function Save() {
                      console.log($scope.EmpRosterList);
                     // return;
                      $scope.EmployeeRosterList = [];
                      if ($scope.EmpRosterList.length==0) {
                          toastr["warning"]('At least One Select.');
                          return;
                      } else {
                          for (var i = 0 ; i < $scope.EmpRosterList.length; i++) {
                              if ($scope.EmpRosterList[i].IsChecked == true) {
                                  $scope.EmployeeRosterList.push($scope.EmpRosterList[i]);

                              }
                          }
                      }
                      blockUI.start("Proccessing");
                      $http({
                          method: 'POST',
                          url: baseUrl + '/Attendance/AddEmpRoster/',
                          data: $scope.EmployeeRosterList
                      }).then(function successCallback(response) {
                          //CheckAllTypeProcess();
                          toastr["success"](response.data.message);
                          $scope.FeesAutomatedMonthList = [];
                         // GetProcessExistByMonth();
                          blockUI.stop();
                      }, function errorCallback(response) {
                          toastr["error"](response.data.Message);
                          blockUI.stop();
                      });
                  };

                  function GetMonth() {

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Fees/getMonthByProcess/' + $scope.ProcessId
                      }).then(function successCallback(response) {
                          $scope.showButton = true;

                          $scope.Months = response.data.results;
                      }, function errorCallback(response) {

                      })
                  }
                  function getAllCommons() {
                      $scope.CommonFeilds = [];

                      $http({
                          method: 'GET',
                          url: baseUrl + 'Common/GetCommonItemEmp/'
                      }).then(function successCallback(response) {
                          $scope.CommonFeilds = response.data.results;
                          console.log($scope.CommonFeilds);
                      }, function errorCallback(response) {
                      });
                  }

                  $scope.Search = function (val) {
                      return $http.get(baseUrl + 'Employee/SearchEmployee/' + val, {
                          params: {

                          }
                      }).then(function (response) {
                          return response.data.results.map(function (item) {
                              return item;
                          });
                      });
                  };
                  $scope.onSelect = function onSelect($item, $model, $label) {

                      $scope.EmpRoster.EmpBasicInfoID = $item.Value;
                      //SearchEmployeeId($item.Value);
                  };

                  function SearchEmployeeId(EmpID) {
                      $scope.employeeInfos = [];
                      $http({
                          method: 'GET',
                          url: baseUrl + 'Employee/GetEmployeeID/' + EmpID
                      }).then(function successCallback(response) {
                          $scope.employeeInfos = response.data.results;
                          console.log($scope.employeeInfos);
                          $scope.tblshow = true;
                      }, function errorCallback(response) {
                          toastr["error"](response.data.Message);
                      });
                  }


                  function GetProcessExistByMonth() {


                      $http({
                          method: 'GET',
                          url: baseUrl + 'Fees/GetProcessExistByMonth/' + $scope.ProcessId
                      }).then(function successCallback(response) {
                          $scope.showButton = true;
                          //$scope.Months = response.data.results
                          $scope.getProcessExistByMonth = response.data.results;
                      }, function errorCallback(response) {
                      });

                  };

                  function getProcess() {
                      formProcessFeilds.$
                      $scope.ProcessName = [];
                      $http({
                          method: 'GET',
                          url: baseUrl + 'Fees/GetFeesProcess/' + $scope.SessionId
                      }).then(function successCallback(response) {

                          $scope.ProcessName = response.data.results;
                      }, function errorCallback(response) {
                      });
                  }
                  //function getAllCommons() {
                  //    $scope.CommonFeilds = [];

                  //    $http({
                  //        method: 'GET',
                  //        url: baseUrl + 'Common/GetCommonItem/'
                  //    }).then(function successCallback(response) {
                  //        $scope.CommonFeilds = response.data.results;
                  //        console.log($scope.CommonFeilds);
                  //    }, function errorCallback(response) {
                  //    });
                  //}
                  $scope.ShowModal = function ShowModal() {
                      if ($scope.formProcessFeilds.$invalid) {
                          $scope.submitted1 = true;
                          return;
                      }
                      $('#addmodal').modal('toggle');
                  }
                  $scope.Process = function Process() {
                      if ($scope.formProcessFeilds.$invalid) {
                          $scope.submitted1 = true;
                          return;
                      }
                      if ($scope.FeesMonthList.length == 0) {
                          toastr["warning"]('Please One Month Selecte');
                          return;
                      }

                      SweetAlert.swal({
                          title: "Confirm to process?", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55",
                          text: "Write something as Remark.",
                          type: "input",
                          showCancelButton: true,
                          closeOnConfirm: false,
                          animation: "slide-from-top",
                          inputPlaceholder: "Remark"
                      },

                        function (inputValue) {
                            if (inputValue === '') {

                                $scope.Remarks = null;
                            } else {
                                $scope.Remarks = inputValue;
                            }

                            swal.close();
                            blockUI.start("Proccessing");
                            angular.forEach($scope.FeesMonthList, function (item) {
                                $http({
                                    method: 'GET',
                                    url: baseUrl + '/Fees/FeesProcess/' + $scope.ProcessId + '/' + item.MonthId + '/' + $scope.SessionId + '/' + $scope.Remarks
                                }).then(function successCallback(response) {
                                    toastr["success"](response.data.message);
                                    blockUI.stop();
                                    //CheckAllTypeProcess();
                                    $scope.FeesMonthList = [];
                                    GetProcessExistByMonth();
                                }, function errorCallback(response) {
                                    toastr["error"](response.data.Message);
                                    blockUI.stop();
                                });
                            });

                        });


                  };
                  $scope.Clear = function Clear(Type, MonthId) {
                      $scope.MonthId = MonthId;
                      if ($scope.formProcessFeilds.$invalid) {
                          $scope.submitted1 = true;
                          return;
                      }
                      if (typeof Type == 'undefined' || Type == null) {
                          return;
                      }
                      Type = String(Type);
                      SweetAlert.swal({
                          title: "Are you sure to Clear Process ?", type: "info", showCancelButton: true, confirmButtonColor: "#DD6B55",
                          confirmButtonText: "Yes, save it!",
                          closeOnConfirm: false
                      },
                     function (isConfirm) {
                         if (isConfirm) {
                             blockUI.start("Clear and Restore");
                             $http({
                                 method: 'GET',
                                 url: baseUrl + '/Fees/ClearProcess/' + $scope.ProcessId + '/' + $scope.MonthId + '/' + Type
                             }).then(function successCallback(response) {
                                 toastr["success"](response.data.message);
                                 blockUI.stop();
                                 ClearAutomated('L', MonthId);
                                 GetProcessExistByMonth();

                             }, function errorCallback(response) {
                                 toastr["error"](response.data.Message);
                                 blockUI.stop();
                             });
                         }
                     });

                  };

                  function ClearAutomated(Type, MonthId) {
                      $scope.MonthId = MonthId;
                      if ($scope.formProcessFeilds.$invalid) {
                          $scope.submitted1 = true;
                          return;
                      }
                      if (typeof Type == 'undefined' || Type == null) {
                          return;
                      }
                      Type = String(Type);
                      blockUI.start("Clear and Restore");
                      $http({
                          method: 'GET',
                          url: baseUrl + '/Fees/ClearProcess/' + $scope.ProcessId + '/' + $scope.MonthId + '/' + Type
                      }).then(function successCallback(response) {
                          //toastr["success"](response.data.message);
                          blockUI.stop();
                          swal.close();
                          //CheckAllTypeProcess();
                          GetProcessExistByMonth();

                      }, function errorCallback(response) {
                          toastr["error"](response.data.Message);
                          blockUI.stop();
                      });
                  };





                  function CheckAllTypeProcess() {
                      if ($scope.ProcessId == null || $scope.MonthId == null || $scope.SessionId == null) {
                          return;
                      }
                      $http({
                          method: 'GET',
                          url: baseUrl + '/Fees/CheckAllTypeProcess/' + $scope.ProcessId + '/' + $scope.FeesMonthId + '/' + $scope.SessionId
                      }).then(function successCallback(response) {
                          $scope.CheckAllType = response.data.results;
                      }, function errorCallback(response) {
                          toastr["error"](response.data.message);
                      });
                  };
                  function resetForm() {
                      $scope.modalTitle = "Automated Fees process";
                  }
              }]);
    </script>
}

